#!/bin/sh
##############################################################################
# Updated easy-wg-quick for use on Alpine Linux.
# ==============================================
# 
# --setup
#   User runtime warning: contents of /etc/wireguard will be removed!
#   
#   Empty existing wireguard config from /etc/wireguard/*
#
#   Creates wg host config files:
#    1. /etc/wireguard/wg0.conf             HUB config file                                         CREATED BY THIS SCRIPT FROM DATA GATHERED BELOW
#    2. /etc/wireguard/peers/               Directory where peer files / data will be saved         {empty directory}
#    3. /etc/wireguard/ext/count            Sequence / peer count                                   echo "1" > /etc/wireguard/ext/count
#    4. /etc/wireguard/ext/endpoint         WAN side endpoint address                               Ask / default 'extnetip'
#    5. /etc/wireguard/ext/port             Random port                                             RANDOM
#    6. /etc/wireguard/ext/privatekey       Private key (SHK)                                       Generated by wg script
#    7. /etc/wireguard/ext/publickey        Public key (PSK)                                        Generated by wg script (wg genkey | tee privatekey | wg pubkey > publickey)
#    8. /etc/wireguard/ext/interface        Network interface for WG to listen on                   List options and ask / default eth0
#    9. /etc/wireguard/ext/localip          IP address for WG to bind to                            Ask / default 'extnetip'
#    10./etc/wireguard/ext/dns              DNS settigs for WG peers                                Ask / default 8.8.8.8
#   
#   Update awall conf to allow new 'port' access from WAN to this 'extnetip'
#
# ----------------------------------------------------------------------------------------------------------------------------------------------------------
#
# Runnng with no options results in a {Client_Name} of 'Peer{SEQ}' or run wg-cerberus "ClientName" for defaul operation:
#
#   Check {Client_Name} is unique and create new /etc/wireguard/peers/{Client_Name}
#   
#   Ask how many clients (single user or subnet group), default 1 (single)
#
#   Generate peer files:
#    1. /etc/wireguard/peers/{Client_Name}/{SEQ}-{Client_Name}-wg.conf      Create peer config file
#    2. /etc/wireguard/peers/{Client_Name}/peer.key                         Peer private key
#    3. /etc/wireguard/peers/{Client_Name}/{SEQ}-{Client_Name}-wg.png       QRCode image for client connections
#   
#   Append new peer data to /etc/wireguard/wg0.conf
#
# ----------------------------------------------------------------------------------------------------------------------------------------------------------
# 
# ** Designed for running on a linx router so the updates to iptables have been disabled. **
#
##############################################################################



## check for wireguard
check_if_wg_is_installed() {
    wg show interfaces >/dev/null 2>&1 || {
        echo 'Unable to use "wg" command. Are wireguard tools installed?'
        printf 'Try: apk add wireguard-tool # on Alpine linux\n'
        exit 1
    }
}

## network interface
ask_ext_net_if() {
    
    defif=$(ip route sh | awk '$1 == "default" { print $5 }')

    read -p "Enter your network interface (auto: $defif): " userif
    if test "$userif" = ""
    then
        EXT_NET_IF="$defif"
    else
        EXT_NET_IF="$userif"
    fi
}

get_ext_net_if() {
    cat "$WG_CONF_EXTRA/interface"
}

## LAN IP
ask_ext_net_ip() {

    defip=$(ip addr sh "$1" | grep 'inet ' | xargs | awk -F'[ /]' '{ print $2 }')

    read -p "Enter your HOST ip address (auto: $defip): " userip
    if test "$userip" = ""
    then
        EXT_NET_IP="$defip"
    else
        EXT_NET_IP="$userip"
    fi
}

get_ext_net_ip() {
    cat "$WG_CONF_EXTRA/localip"
}

## Host end point address
ask_endpoint_address() {
    read -p "Enter your end point address (auto: $EXT_NET_IP): " userep
    if test "$userep" = ""
    then
        EXT_NET_ENDPOINT="$EXT_NET_IP"
    else
        EXT_NET_ENDPOINT="$userep"
    fi
}

get_endpoint_address() {
    cat "$WG_CONF_EXTRA/endpoint"
}

## DNS SETTING
ask_peer_dns() {
    read -p "Enter the PEER dns address (auto: 1.1.1.1): " userip
    if test "$userip" = ""
    then
        EXT_PEER_DNS="1.1.1.1"
    else
        EXT_PEER_DNS="$userip"
    fi
}

get_peer_dns() {
    cat "$WG_CONF_EXTRA/dns"
}

## ipv6
check_if_ipv6_is_available() {
    if test "x$(uname -s)" = "xFreeBSD"; then
        IPV6ADR=$(ifconfig "$1" | awk '$1 == "inet6" { print $2 }' | grep -v "%$1$")
        test -n "$IPV6ADR" && {
            echo '- Looks like you have IPv6 available. Enabling IPv6 in tunnels!'
            return  0
        }
    elif test "x$(uname -s)" = "xLinux"; then
        ip -6 addr | grep -i 'scope global' >/dev/null 2>&1 && {
            echo '- Looks like you have IPv6 available. Enabling IPv6 in tunnels!'
            return  0
        }
    else
        echo '- Unsupported operating system. Unable to detect IPv6 availability.'
    fi
    return 1
}

## client sequence record
update_seq_no() {
    echo "$1" > "$WG_CONF_EXTRA/count"
}

create_seq_no() {
    echo "- Initialising sequence counter at 10..."
    update_seq_no 10
}

get_seq_no() {
    SEQNO=$(cat "$WG_CONF_EXTRA/count")
    NEXT=$((SEQNO+1))
    update_seq_no $NEXT
    echo "$SEQNO"
}

## wg listening port
create_port_no() {
    (shuf -i 1025-65535 -n 1 || jot -r 1 1025 65535) > "$WG_CONF_EXTRA/port" 2>/dev/null
    test -s "$WG_CONF_EXTRA/port" || {
        echo '! Unable to assign random port for Wireguard.'
        echo '  Set it manually in $WG_CONF_EXTRA/port file.'
        exit 1
    }
}

get_port_no() {
    cat "$WG_CONF_EXTRA/port"
}

## main config file
create_hub_conf() {
    echo "- Creating HUB config file..."
    cat > "$WG_CONF_ROOT/wg0.conf" << EOF
[Interface]
Address = $INT_NET_HUB_IP$INT_NET_MASK$($NET6 && echo ", $INT_NET6_HUB_IP$INT_NET6_MASK")
ListenPort = $(cat "$WG_CONF_EXTRA/port")
PrivateKey = $(cat "$WG_CONF_EXTRA/privatekey")
SaveConfig = false

EOF

    echo "- Wireguard hub address is $EXT_NET_IP:$EXT_NET_PORT on $EXT_NET_IF."
    echo "   Note: customize [Interface] section of wg0.conf if required!"
}

create_new_client_conf() {
    SEQNO="$1"
    CONF_NAME="$2"

    echo "- Creating client configuration file(s)..."
    cat > "$WG_CONF_PEERS/$CONF_NAME/wgc_$CONF_NAME.conf" << EOF
# $SEQNO: $CONF_NAME > wgc_$CONF_NAME.conf
[Interface]
Address = $INT_NET_PEER$SEQNO$INT_NET_MASK$($NET6 && echo ", $INT_NET6_PEER$SEQNO$INT_NET6_MASK")
DNS = $INT_NET_DNS$($NET6 && echo ", $INT_NET6_DNS")
PrivateKey = $PEER_PRIVATEKEY

[Peer]
PublicKey = $PEER_PUBLICKEY
PresharedKey = $HUB_PUB_KEY
AllowedIPs = 0.0.0.0/0, ::/0
Endpoint = $EXT_NET_ENDPOINT:$EXT_NET_PORT
PersistentKeepalive = 25
EOF
}

add_client_to_hub_conf() {
    SEQNO="$1"
    CONF_NAME="$2"

    echo "- Updating HUB config..."
    cat >> "$WG_CONF_ROOT/wg0.conf" << EOF

# $SEQNO: $CONF_NAME > wgclient_$CONF_NAME.conf
[Peer]
PublicKey = $PEER_PUBLICKEY
PresharedKey = $HUB_PUB_KEY
AllowedIPs = $INT_NET_PEER$SEQNO$INT_NET_PEER_MASK$($NET6 && echo ", $INT_NET6_PEER$1$INT_NET6_PEER_MASK")
EOF
    echo "- Peer added."

}

print_client_conf() {
    echo "-----BEGIN CONFIG-----"
    cat "$WG_CONF_PEERS/$1/wgc_$1.conf"
    echo "-----END CONFIG-----"
}

print_client_qrcode() {
    qrencode -o "$WG_CONF_PEERS/$1/wgc_$1.png" < "$WG_CONF_PEERS/$1/wgc_$1.conf"
    echo "Scan QR code with your phone or use \"$WG_CONF_PEERS/$1/wgc_$1.conf\" file."
}

check_conf_name_is_available() {
    FILENAME="$WG_CONF_PEERS/$1"
    if test -d "$FILENAME"; then
        printf '\nUnable to store configuration with chosen name: "%s" already exists.\n' "$1"
        return 1
    fi
    return 0
}

print_conf_name_help() {
    cat << EOF

Note: passing argument to script creates client configuration with supplied
      name to help remembering which config was for which device. If you
      didn't pass any argument you can still rename created file manually
      with command:
  mv -vi wgclient_$1.conf wgclient_name.conf

EOF
}

create_new_client() {
    echo "- Creating new peer: $2"
    SEQNO="$1"
    CONF_NAME="$2"

    create_new_client_conf "$SEQNO" "$CONF_NAME"
    if qrencode -V >/dev/null 2>&1; then
        print_client_qrcode "$CONF_NAME"
    else
        print_client_conf "$CONF_NAME"
    fi
    add_client_to_hub_conf "$SEQNO" "$CONF_NAME"
}

and_continue() {
    read -n 1 -p "Do you want to continue: [Y/n]" acc
    if test "$acc" = "n"
    then
        echo "- Cancelled."
        exit 1
    elif test "$acc" = "N"
    then
        echo "- Cancelled."
        exit 1
    elif test "$acc" = "y"
    then
        echo "- continuing..."
    elif test "$acc" = "Y"
    then
        echo "- continuing..."
    else
        and_continue
    fi
}

setup_mode() {
    # display setup mode status / warning
    echo "- Setup mode invoked..."
    echo " ** WARNING: Setup mode will delete the current contents of /etc/wireguard/ **"
    echo " ** and create a new host. All previous peer connections will be void.      **"
    echo " ** If you choose (n) below or Ctrl+C if you want to back up first.         **"
    echo " "
    and_continue

    # empty the current config directory
    echo "- Creating config directories..."
    rm -rf "$WG_CONF_ROOT"
    mkdir "$WG_CONF_ROOT"
    mkdir "$WG_CONF_EXTRA"
    mkdir "$WG_CONF_PEERS"

    # detect and ask for network interface to host
    ask_ext_net_if
    echo "$EXT_NET_IF" > "$WG_CONF_EXTRA/interface"

    # ask for local IP, endpoint, DNS
    ask_ext_net_ip "$EXT_NET_IF"
    echo "$EXT_NET_IP" > "$WG_CONF_EXTRA/localip"

    ask_endpoint_address
    echo "$EXT_NET_ENDPOINT" > "$WG_CONF_EXTRA/endpoint"

    ask_peer_dns
    echo "$EXT_PEER_DNS" > "$WG_CONF_EXTRA/dns"

    # create host keys
    echo "- Generating server keys, port, and sequence..."
    wg genkey | tee "$WG_CONF_EXTRA/privatekey" | wg pubkey > "$WG_CONF_EXTRA/publickey"

    create_port_no

    create_seq_no

    INT_NET_HUB_IP="10.127.0.1"
    INT_NET_MASK="/24"

    INT_NET_PEER="10.127.0."
    INT_NET_PEER_MASK="/32"

    NET6=false
    check_if_ipv6_is_available "$EXT_NET_IF" && {
        NET6=true
        INT_NET6_HUB_IP="fdfc:2965:0503:e2ae::1"
        INT_NET6_MASK="/64"
        INT_NET6_DNS="2606:4700:4700::1111"
        INT_NET6_PEER="fdfc:2965:0503:e2ae::"
        INT_NET6_PEER_MASK="/128"
    }

    # create the main hub config: wg0.conf
    create_hub_conf

    echo "Setup complete."
    exit 1

}

force_setup_mode() {
    echo "- Incorrect configuration detected!"
    echo "  Forcing setup mode switch..."
    setup_mode
}

boot_splash() {
    echo "WG-CERBERUS v1.BETA"
    echo "Config tool for Wireguard based on easy-wg-quick and adapted for Alpine Linux."
}

## main routine
main() {
    # boot splash
    boot_splash

    ## system constants
    WG_CONF_ROOT="/etc/wireguard"
    WG_CONF_EXTRA="/etc/wireguard/ext"
    WG_CONF_PEERS="/etc/wireguard/peers"

    # check for wg install
    # check_if_wg_is_installed

    # check mode 'setup' or 'add peer'
    if test "$1" = "--setup"
    then
        # invoke setup mode
        setup_mode
    else
        # check setup
        test -f "$WG_CONF_EXTRA/count" || force_setup_mode

        # create new peer
        CONF_NAME="$1"

        # load server configuration
        EXT_NET_IF=$(cat "$WG_CONF_EXTRA/interface")
        EXT_NET_IP=$(cat "$WG_CONF_EXTRA/localip")
        EXT_NET_ENDPOINT=$(cat "$WG_CONF_EXTRA/endpoint")
        EXT_NET_PORT=$(cat "$WG_CONF_EXTRA/port")
        HUB_PUB_KEY=$(cat "$WG_CONF_EXTRA/publickey")
        INT_NET_DNS=$(cat "$WG_CONF_EXTRA/dns")

        INT_NET_HUB_IP="10.127.0.1"
        INT_NET_MASK="/24"

        INT_NET_PEER="10.127.0."
        INT_NET_PEER_MASK="/32"

        NET6=false
        check_if_ipv6_is_available "$EXT_NET_IF" && {
            NET6=true
            INT_NET6_HUB_IP="fdfc:2965:0503:e2ae::1"
            INT_NET6_MASK="/64"
            INT_NET6_DNS="2606:4700:4700::1111"
            INT_NET6_PEER="fdfc:2965:0503:e2ae::"
            INT_NET6_PEER_MASK="/128"
        }
        SEQNO="$(get_seq_no)"

        if test -z "$CONF_NAME"; then
            CONF_NAME="Grp_$SEQNO"
            print_conf_name_help "Grp_$SEQNO"
        fi

        if check_conf_name_is_available "$CONF_NAME"; then
            echo "- Creating PEER data folder: $WG_CONF_PEERS/$CONF_NAME"
            mkdir "$WG_CONF_PEERS/$CONF_NAME"
            wg genkey | tee "$WG_CONF_PEERS/$CONF_NAME/privatekey" | wg pubkey > "$WG_CONF_PEERS/$CONF_NAME/publickey"
            PEER_PRIVATEKEY=$(cat "$WG_CONF_PEERS/$CONF_NAME/privatekey")
            PEER_PUBLICKEY=$(cat "$WG_CONF_PEERS/$CONF_NAME/publickey")
            create_new_client "$SEQNO" "$CONF_NAME"

            echo "- $CONF_NAME Created!"

            cat << EOF

Important: Deploy updated wg0.conf configuration to wireguard with wg-quick:
  wg-quick down wg0 # if already configured
  wg-quick up wg0
  wg show # to check status
EOF
        fi


    fi
}

## ENTRY POINT
main "$1"